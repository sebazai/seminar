@inproceedings{10.1145/2652524.2652529,
author = {Zieris, Franz and Prechelt, Lutz},
title = {On knowledge transfer skill in pair programming},
year = {2014},
isbn = {9781450327749},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2652524.2652529},
doi = {10.1145/2652524.2652529},
abstract = {Context: General knowledge transfer is often considered a valuable effect or side-effect of pair programming, but even more important is its role for the success of the pair programming session itself: The partners often need to explain an idea to carry the process forward. Goal: Understand the mechanisms at work when knowledge is transferred during a pair programming session; provide practical advice for constructive behavior. Method: Qualitative data analysis of recordings of actual industrial pair programming sessions. Results: Some pairs are much more efficient in their knowledge transfer than others. These pairs manage to (1) not attempt to explain multiple things at once, (2) not lose sight of a topic, (3) clarify difficult points in stages. Conclusions: Pair programming requires skill beyond software development skill. To be able to identify knowledge needs and then push such knowledge to or pull it from the partner successfully is one aspect of such skill. We characterize a number of its elements.},
booktitle = {Proceedings of the 8th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement},
articleno = {11},
numpages = {10},
keywords = {pair programming, collaboration, agile software development},
location = {Torino, Italy},
series = {ESEM '14}
}


@article{Williams2000Strengthening,
author = {Williams, Laurie and Kessler, Robert R. and Cunningham, Ward and Jeffries, Ron},
journal = {IEEE Software},
doi = {10.1109/52.854064},
number = {4},
year = {2000},
month = {jan 1},
pages = {19--25},
title = {Strengthening the case for pair programming},
volume = {17},
}

@inproceedings{10.1145/1414004.1414026,
author = {Begel, Andrew and Nagappan, Nachiappan},
title = {Pair programming: what's in it for me?},
year = {2008},
isbn = {9781595939715},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1414004.1414026},
doi = {10.1145/1414004.1414026},
abstract = {Pair programming is a practice in which two programmers work collaboratively at one computer on the same design, algorithm, or code. Prior research on pair programming has primarily focused on its evaluation in academic settings. There has been limited evidence on the use, problems and benefits, partner selection, and the general perceptions towards pair programming in industrial settings. In this paper we report on a longitudinal evaluation of pair programming at Microsoft Corporation. We find from the results of a survey sent to a randomly selected 10\% of engineers at Microsoft that 22\% pair program or have pair programmed in the past. Using qualitative analysis, we performed a large-scale card sort to group the various benefits and problems of pair programming. The biggest perceived benefits of pair programming were the introduction of fewer bugs, spreading code understanding, and producing overall higher quality code. The top problems were cost-efficiency, (work time) scheduling problems, and personality conflicts. Most engineers preferred a partner who had complementary skills to their own, who was flexible and had good communication skills.},
booktitle = {Proceedings of the Second ACM-IEEE International Symposium on Empirical Software Engineering and Measurement},
pages = {120–128},
numpages = {9},
keywords = {survey experiments, pair programming, empirical studies, developers},
location = {Kaiserslautern, Germany},
series = {ESEM '08}
}

@article{Arisholm2007Evaluating,
author = {Arisholm, Erik and Gallis, Hans and Dyb{\r a}, Tore and Sj\o{}berg, Dag I. K.},
journal = {IEEE Transactions on Software Engineering},
doi = {10.1109/tse.2007.17},
number = {2},
year = {2007},
month = {feb 1},
pages = {65--86},
title = {Evaluating {Pair} {Programming} with {Respect} to {System} {Complexity} and {Programmer} {Expertise}},
volume = {33},
}

@inproceedings{10.1145/1852786.1852816,
author = {Salleh, Norsaremah and Mendes, Emilia and Grundy, John and Burch, Giles St. J.},
title = {The effects of neuroticism on pair programming: an empirical study in the higher education context},
year = {2010},
isbn = {9781450300391},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1852786.1852816},
doi = {10.1145/1852786.1852816},
abstract = {This paper reports on an empirical study that investigates the effects of the personality trait of neuroticism on the academic performance of students who practiced pair programming during one academic semester. The experiment was conducted at The University of Auckland involving 270 first year undergraduate students enrolled in an introductory programming course. In this study, we hypothesized that neuroticism or lack of 'emotional stability' potentially affects pair students' academic performance. However, from the analysis of our results we found lack of evidence to support this. A correlation analysis showed significant positive associations between the conscientiousness personality trait and almost all performance criteria, thus corroborating evidence reported in the educational psychology literature.},
booktitle = {Proceedings of the 2010 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement},
articleno = {22},
numpages = {10},
keywords = {personality type, pair programming, higher education, formal experiment, five-factor model, empirical investigation, conscientiousness},
location = {Bolzano-Bozen, Italy},
series = {ESEM '10}
}

@article{ChamorroPremuzic2003Personality,
author = {ChamorroPremuzic, Tomas and Furnham, Adrian},
journal = {Journal of Research in Personality},
doi = {10.1016/s0092-6566(02)00578-0},
number = {4},
year = {2003},
month = {aug 1},
pages = {319--338},
title = {Personality predicts academic performance: Evidence from two longitudinal university samples},
volume = {37},
}

@inproceedings{10.1145/1159733.1159749,
author = {Phongpaibul, Monvorath and Boehm, Barry},
title = {An empirical comparison between pair development and software inspection in Thailand},
year = {2006},
isbn = {1595932186},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1159733.1159749},
doi = {10.1145/1159733.1159749},
abstract = {Although pair programming and software inspection have the common aim of minimizing the defects of the software product, each practice has its strengths and weaknesses. We need to understand their costs and benefits under given conditions to be able to select a practice to execute in a development project. The objective of this study is to compare the commonalities and differences between pair development and software inspection as verification techniques in Thailand. One classroom experiment and one industry experiment were conducted. The development effort and effect of quality were investigated with some additional calendar time comparisons. The classroom results showed that average development effort of the pair development group was 24\% less than inspection group with the improved product quality. The industry experiment showed pair development to have about 4\% more effort but about 40\% fewer major defects. In addition, the impacts of cultural differences to the adoption of pair programming or software inspection in Thailand are discussed.},
booktitle = {Proceedings of the 2006 ACM/IEEE International Symposium on Empirical Software Engineering},
pages = {85–94},
numpages = {10},
keywords = {software verification, software process model, software inspection, peer review, pair programming, empirical study},
location = {Rio de Janeiro, Brazil},
series = {ISESE '06}
}


@article{Hannay2009effectiveness,
author = {Hannay, Jo Erskine and Dyb{\r a}, Tore and Arisholm, Erik and Sj\o{}berg, Dag I. K.},
journal = {Information and Software Technology},
doi = {10.1016/j.infsof.2009.02.001},
number = {7},
year = {2009},
month = {jul 1},
pages = {1110--1122},
title = {The effectiveness of pair programming: A meta-analysis},
volume = {51},
}


@inbook{10.5555/377517.377531,
author = {Cockburn, Alistair and Williams, Laurie},
title = {The costs and benefits of pair programming},
year = {2001},
isbn = {0201710404},
publisher = {Addison-Wesley Longman Publishing Co., Inc.},
address = {USA},
booktitle = {Extreme Programming Examined},
pages = {223–243},
numpages = {21},
url = {https://collaboration.csc.ncsu.edu/laurie/Papers/XPSardinia.PDF}
}

@book{10.5555/1076267,
author = {Beck, Kent and Andres, Cynthia},
title = {Extreme Programming Explained: Embrace Change (2nd Edition)},
year = {2004},
isbn = {0321278658},
publisher = {Addison-Wesley Professional},
abstract = {Whether you have a small team that is already closely aligned with your customers or a large team in a gigantic or multinational organization, you will find in these pages a wealth of ideas to challenge, inspire, and encourage you and your team members to substantially improve your software development.You will discover how to: Involve the whole team-XP style Increase technical collaboration through pair programming and continuous integration Reduce defects through developer testing Align business and technical decisions through weekly and quarterly planning Improve teamwork by setting up an informative, shared workspaceYou will also find many other concrete ideas for improvement, all based on a philosophy that emphasizes simultaneously increasing the humanity and effectiveness of software development.Every team can improve. Every team can begin improving today. Improvement is possible-beyond what we can currently imagine. Extreme Programming Explained, Second Edition, offers ideas to fuel your improvement for years to come.}
}